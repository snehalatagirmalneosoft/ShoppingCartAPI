//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShoppingCart.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ShoppingCartEntities : DbContext
    {
        public ShoppingCartEntities()
            : base("name=ShoppingCartEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cart> Cart { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Exception> Exception { get; set; }
        public virtual DbSet<Images> Images { get; set; }
        public virtual DbSet<OrderDetail> OrderDetail { get; set; }
        public virtual DbSet<OrderMaster> OrderMaster { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<State> State { get; set; }
        public virtual DbSet<SubCategory> SubCategory { get; set; }
        public virtual DbSet<Temp> Temp { get; set; }
        public virtual DbSet<UserDetail> UserDetail { get; set; }
        public virtual DbSet<UserMaster> UserMaster { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }
        public virtual DbSet<ViewProductDetails> ViewProductDetails { get; set; }
    
        public virtual ObjectResult<GetCartProducts_Result> GetCartProducts(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCartProducts_Result>("GetCartProducts", userIdParameter);
        }
    
        public virtual ObjectResult<GetCountryNames_Result> GetCountryNames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCountryNames_Result>("GetCountryNames");
        }
    
        public virtual int STP_AddNewProduct(Nullable<int> subCategoryId, string productName, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<decimal> price, string productDescription, Nullable<bool> isActive, Nullable<int> quantity)
        {
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("createdOn", createdOn) :
                new ObjectParameter("createdOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("productDescription", productDescription) :
                new ObjectParameter("productDescription", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_AddNewProduct", subCategoryIdParameter, productNameParameter, createdOnParameter, createdByParameter, priceParameter, productDescriptionParameter, isActiveParameter, quantityParameter);
        }
    
        public virtual int STP_AddOrder(Nullable<int> userId, Nullable<decimal> grossAmount, string receiverMobileNumber, string billingMode, string shippingAddress, Nullable<System.DateTime> orderDate, string orderStatus, string receiverEmailId, string receiverFirstName, string receiverLastName)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("grossAmount", grossAmount) :
                new ObjectParameter("grossAmount", typeof(decimal));
    
            var receiverMobileNumberParameter = receiverMobileNumber != null ?
                new ObjectParameter("receiverMobileNumber", receiverMobileNumber) :
                new ObjectParameter("receiverMobileNumber", typeof(string));
    
            var billingModeParameter = billingMode != null ?
                new ObjectParameter("billingMode", billingMode) :
                new ObjectParameter("billingMode", typeof(string));
    
            var shippingAddressParameter = shippingAddress != null ?
                new ObjectParameter("shippingAddress", shippingAddress) :
                new ObjectParameter("shippingAddress", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("orderDate", orderDate) :
                new ObjectParameter("orderDate", typeof(System.DateTime));
    
            var orderStatusParameter = orderStatus != null ?
                new ObjectParameter("orderStatus", orderStatus) :
                new ObjectParameter("orderStatus", typeof(string));
    
            var receiverEmailIdParameter = receiverEmailId != null ?
                new ObjectParameter("receiverEmailId", receiverEmailId) :
                new ObjectParameter("receiverEmailId", typeof(string));
    
            var receiverFirstNameParameter = receiverFirstName != null ?
                new ObjectParameter("receiverFirstName", receiverFirstName) :
                new ObjectParameter("receiverFirstName", typeof(string));
    
            var receiverLastNameParameter = receiverLastName != null ?
                new ObjectParameter("receiverLastName", receiverLastName) :
                new ObjectParameter("receiverLastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_AddOrder", userIdParameter, grossAmountParameter, receiverMobileNumberParameter, billingModeParameter, shippingAddressParameter, orderDateParameter, orderStatusParameter, receiverEmailIdParameter, receiverFirstNameParameter, receiverLastNameParameter);
        }
    
        public virtual int STP_AddProductsToCart(Nullable<int> productId, Nullable<int> userId, Nullable<int> quantity, Nullable<decimal> price)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_AddProductsToCart", productIdParameter, userIdParameter, quantityParameter, priceParameter);
        }
    
        public virtual int STP_DeleteCategory(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteCategory", categoryIdParameter);
        }
    
        public virtual int STP_DeleteCity(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteCity", idParameter);
        }
    
        public virtual int STP_DeleteCountry(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteCountry", idParameter);
        }
    
        public virtual int STP_DeleteException(Nullable<int> exceptionId)
        {
            var exceptionIdParameter = exceptionId.HasValue ?
                new ObjectParameter("exceptionId", exceptionId) :
                new ObjectParameter("exceptionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteException", exceptionIdParameter);
        }
    
        public virtual int STP_DeleteProduct(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteProduct", productIdParameter);
        }
    
        public virtual int STP_DeleteProductImage(Nullable<int> imageId)
        {
            var imageIdParameter = imageId.HasValue ?
                new ObjectParameter("imageId", imageId) :
                new ObjectParameter("imageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteProductImage", imageIdParameter);
        }
    
        public virtual int STP_DeleteState(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteState", idParameter);
        }
    
        public virtual int STP_DeleteSubCategory(Nullable<int> subCategoryId)
        {
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteSubCategory", subCategoryIdParameter);
        }
    
        public virtual int STP_DeleteTemporaryImage(Nullable<int> tempId)
        {
            var tempIdParameter = tempId.HasValue ?
                new ObjectParameter("tempId", tempId) :
                new ObjectParameter("tempId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteTemporaryImage", tempIdParameter);
        }
    
        public virtual int STP_DeleteUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteUser", userIdParameter);
        }
    
        public virtual ObjectResult<STP_GetAllCities_Result> STP_GetAllCities()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetAllCities_Result>("STP_GetAllCities");
        }
    
        public virtual ObjectResult<STP_GetAllStates_Result> STP_GetAllStates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetAllStates_Result>("STP_GetAllStates");
        }
    
        public virtual ObjectResult<STP_GetAllSubCategories_Result> STP_GetAllSubCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetAllSubCategories_Result>("STP_GetAllSubCategories");
        }
    
        public virtual ObjectResult<STP_GetCartProduct_Result> STP_GetCartProduct(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetCartProduct_Result>("STP_GetCartProduct", productIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> STP_GetCategoryId(Nullable<int> subCategoryId)
        {
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("STP_GetCategoryId", subCategoryIdParameter);
        }
    
        public virtual ObjectResult<STP_GetCategoryIdAndSubCategoryID_Result> STP_GetCategoryIdAndSubCategoryID(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetCategoryIdAndSubCategoryID_Result>("STP_GetCategoryIdAndSubCategoryID", productIdParameter);
        }
    
        public virtual ObjectResult<STP_GetCategoryName_Result> STP_GetCategoryName(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetCategoryName_Result>("STP_GetCategoryName", categoryIdParameter);
        }
    
        public virtual ObjectResult<STP_GetCities_Result> STP_GetCities(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("stateId", stateId) :
                new ObjectParameter("stateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetCities_Result>("STP_GetCities", stateIdParameter);
        }
    
        public virtual ObjectResult<STP_GetCitiesForCountry_Result> STP_GetCitiesForCountry(Nullable<int> countryId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetCitiesForCountry_Result>("STP_GetCitiesForCountry", countryIdParameter);
        }
    
        public virtual ObjectResult<STP_GetCityDetails_Result> STP_GetCityDetails(Nullable<int> cityId)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetCityDetails_Result>("STP_GetCityDetails", cityIdParameter);
        }
    
        public virtual ObjectResult<string> STP_GetCountryDetails(Nullable<int> countryId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("STP_GetCountryDetails", countryIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> STP_GetCountryId(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("stateId", stateId) :
                new ObjectParameter("stateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("STP_GetCountryId", stateIdParameter);
        }
    
        public virtual ObjectResult<string> STP_GetEmailIdList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("STP_GetEmailIdList");
        }
    
        public virtual int STP_GetException(string type, string details, string fileName, string method, Nullable<System.DateTime> datetime)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("details", details) :
                new ObjectParameter("details", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("method", method) :
                new ObjectParameter("method", typeof(string));
    
            var datetimeParameter = datetime.HasValue ?
                new ObjectParameter("datetime", datetime) :
                new ObjectParameter("datetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_GetException", typeParameter, detailsParameter, fileNameParameter, methodParameter, datetimeParameter);
        }
    
        public virtual ObjectResult<STP_GetExceptionDetails_Result> STP_GetExceptionDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetExceptionDetails_Result>("STP_GetExceptionDetails");
        }
    
        public virtual ObjectResult<STP_GetProductsByCategory_Result> STP_GetProductsByCategory(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetProductsByCategory_Result>("STP_GetProductsByCategory", categoryIdParameter);
        }
    
        public virtual ObjectResult<STP_GetProductsBySubCategory_Result> STP_GetProductsBySubCategory(Nullable<int> subCategoryId)
        {
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetProductsBySubCategory_Result>("STP_GetProductsBySubCategory", subCategoryIdParameter);
        }
    
        public virtual ObjectResult<STP_GetRoleList_Result> STP_GetRoleList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetRoleList_Result>("STP_GetRoleList");
        }
    
        public virtual ObjectResult<STP_GetStateDetails_Result> STP_GetStateDetails(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("stateId", stateId) :
                new ObjectParameter("stateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetStateDetails_Result>("STP_GetStateDetails", stateIdParameter);
        }
    
        public virtual ObjectResult<STP_GetStates_Result> STP_GetStates(Nullable<int> countryId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetStates_Result>("STP_GetStates", countryIdParameter);
        }
    
        public virtual ObjectResult<STP_GetSubCategoryDetails_Result> STP_GetSubCategoryDetails(Nullable<int> subCategoryId)
        {
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetSubCategoryDetails_Result>("STP_GetSubCategoryDetails", subCategoryIdParameter);
        }
    
        public virtual ObjectResult<STP_GetUserDetails_Result> STP_GetUserDetails(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetUserDetails_Result>("STP_GetUserDetails", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> STP_GetUserIdViaEmailId(string emailId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("STP_GetUserIdViaEmailId", emailIdParameter);
        }
    
        public virtual ObjectResult<string> STP_GetUserName(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("STP_GetUserName", userIdParameter);
        }
    
        public virtual ObjectResult<STP_GetUsers_Result> STP_GetUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetUsers_Result>("STP_GetUsers");
        }
    
        public virtual int STP_InsertCategories(string categoryName, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, Nullable<bool> isActive)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("categoryName", categoryName) :
                new ObjectParameter("categoryName", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("createdOn", createdOn) :
                new ObjectParameter("createdOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("modifiedOn", modifiedOn) :
                new ObjectParameter("modifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_InsertCategories", categoryNameParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, isActiveParameter);
        }
    
        public virtual int STP_InsertCity(Nullable<int> stateId, string cityName)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("stateId", stateId) :
                new ObjectParameter("stateId", typeof(int));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("cityName", cityName) :
                new ObjectParameter("cityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_InsertCity", stateIdParameter, cityNameParameter);
        }
    
        public virtual int STP_InsertCountry(string countryName)
        {
            var countryNameParameter = countryName != null ?
                new ObjectParameter("countryName", countryName) :
                new ObjectParameter("countryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_InsertCountry", countryNameParameter);
        }
    
        public virtual int STP_InsertImagesIntoTemp(string imageUrl)
        {
            var imageUrlParameter = imageUrl != null ?
                new ObjectParameter("imageUrl", imageUrl) :
                new ObjectParameter("imageUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_InsertImagesIntoTemp", imageUrlParameter);
        }
    
        public virtual int STP_InsertProduct(Nullable<int> subCategoryId, string productName, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<decimal> price, string productDescription, Nullable<bool> isActive, Nullable<int> quantity)
        {
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("createdOn", createdOn) :
                new ObjectParameter("createdOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("productDescription", productDescription) :
                new ObjectParameter("productDescription", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_InsertProduct", subCategoryIdParameter, productNameParameter, createdOnParameter, createdByParameter, priceParameter, productDescriptionParameter, isActiveParameter, quantityParameter);
        }
    
        public virtual int STP_InsertState(Nullable<int> countryId, string stateName)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("stateName", stateName) :
                new ObjectParameter("stateName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_InsertState", countryIdParameter, stateNameParameter);
        }
    
        public virtual int STP_InsertSubCategories(Nullable<int> categoryId, string subCategoryName, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, Nullable<bool> isActive)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            var subCategoryNameParameter = subCategoryName != null ?
                new ObjectParameter("subCategoryName", subCategoryName) :
                new ObjectParameter("subCategoryName", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("createdOn", createdOn) :
                new ObjectParameter("createdOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("modifiedOn", modifiedOn) :
                new ObjectParameter("modifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_InsertSubCategories", categoryIdParameter, subCategoryNameParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, isActiveParameter);
        }
    
        public virtual int STP_InsertUser(Nullable<int> roleId, string emailId, string userPassWord, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<bool> isActive, string firstName, string lastName, string permanentAddress, string alternateAddress, string mobileNumber, string city)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(int));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var userPassWordParameter = userPassWord != null ?
                new ObjectParameter("userPassWord", userPassWord) :
                new ObjectParameter("userPassWord", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("createdOn", createdOn) :
                new ObjectParameter("createdOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("permanentAddress", permanentAddress) :
                new ObjectParameter("permanentAddress", typeof(string));
    
            var alternateAddressParameter = alternateAddress != null ?
                new ObjectParameter("alternateAddress", alternateAddress) :
                new ObjectParameter("alternateAddress", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("mobileNumber", mobileNumber) :
                new ObjectParameter("mobileNumber", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_InsertUser", roleIdParameter, emailIdParameter, userPassWordParameter, createdOnParameter, createdByParameter, isActiveParameter, firstNameParameter, lastNameParameter, permanentAddressParameter, alternateAddressParameter, mobileNumberParameter, cityParameter);
        }
    
        public virtual ObjectResult<STP_LoginUser_Result> STP_LoginUser(string emailId, string password)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_LoginUser_Result>("STP_LoginUser", emailIdParameter, passwordParameter);
        }
    
        public virtual ObjectResult<STP_ProductDetails_Result> STP_ProductDetails(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_ProductDetails_Result>("STP_ProductDetails", productIdParameter);
        }
    
        public virtual ObjectResult<STP_RandomProducts_Result> STP_RandomProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_RandomProducts_Result>("STP_RandomProducts");
        }
    
        public virtual int STP_RegisterCustomer(Nullable<int> roleId, string emailId, string userPassWord, Nullable<System.DateTime> createdOn, Nullable<bool> isActive, string firstName, string lastName, string permanentAddress, string alternateAddress, string mobileNumber, string city)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(int));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var userPassWordParameter = userPassWord != null ?
                new ObjectParameter("userPassWord", userPassWord) :
                new ObjectParameter("userPassWord", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("createdOn", createdOn) :
                new ObjectParameter("createdOn", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("permanentAddress", permanentAddress) :
                new ObjectParameter("permanentAddress", typeof(string));
    
            var alternateAddressParameter = alternateAddress != null ?
                new ObjectParameter("alternateAddress", alternateAddress) :
                new ObjectParameter("alternateAddress", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("mobileNumber", mobileNumber) :
                new ObjectParameter("mobileNumber", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_RegisterCustomer", roleIdParameter, emailIdParameter, userPassWordParameter, createdOnParameter, isActiveParameter, firstNameParameter, lastNameParameter, permanentAddressParameter, alternateAddressParameter, mobileNumberParameter, cityParameter);
        }
    
        public virtual int STP_RemoveProductFromCart(Nullable<int> productId, Nullable<int> userId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_RemoveProductFromCart", productIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<STP_Search_Result> STP_Search(string value)
        {
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_Search_Result>("STP_Search", valueParameter);
        }
    
        public virtual ObjectResult<STP_SearchActiveProducts_Result> STP_SearchActiveProducts(string value)
        {
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_SearchActiveProducts_Result>("STP_SearchActiveProducts", valueParameter);
        }
    
        public virtual ObjectResult<STP_ShowAllProductList_Result> STP_ShowAllProductList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_ShowAllProductList_Result>("STP_ShowAllProductList");
        }
    
        public virtual ObjectResult<STP_ShowAllProductsForCategory_Result> STP_ShowAllProductsForCategory(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_ShowAllProductsForCategory_Result>("STP_ShowAllProductsForCategory", categoryIdParameter);
        }
    
        public virtual ObjectResult<STP_ShowCategoryList_Result> STP_ShowCategoryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_ShowCategoryList_Result>("STP_ShowCategoryList");
        }
    
        public virtual ObjectResult<STP_ShowProductImages_Result> STP_ShowProductImages(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_ShowProductImages_Result>("STP_ShowProductImages", productIdParameter);
        }
    
        public virtual ObjectResult<STP_ShowProductList_Result> STP_ShowProductList(Nullable<int> subCategoryId)
        {
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_ShowProductList_Result>("STP_ShowProductList", subCategoryIdParameter);
        }
    
        public virtual ObjectResult<STP_ShowSubCategoryList_Result> STP_ShowSubCategoryList(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_ShowSubCategoryList_Result>("STP_ShowSubCategoryList", categoryIdParameter);
        }
    
        public virtual ObjectResult<STP_ShowTemporaryImages_Result> STP_ShowTemporaryImages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_ShowTemporaryImages_Result>("STP_ShowTemporaryImages");
        }
    
        public virtual int STP_UpdateCart(Nullable<int> productId, Nullable<int> quantity, Nullable<decimal> price, Nullable<int> userId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateCart", productIdParameter, quantityParameter, priceParameter, userIdParameter);
        }
    
        public virtual int STP_UpdateCategories(Nullable<int> categoryId, string categoryName, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, Nullable<bool> isActive)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("categoryName", categoryName) :
                new ObjectParameter("categoryName", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("modifiedOn", modifiedOn) :
                new ObjectParameter("modifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateCategories", categoryIdParameter, categoryNameParameter, modifiedOnParameter, modifiedByParameter, isActiveParameter);
        }
    
        public virtual int STP_UpdateCity(Nullable<int> cityId, Nullable<int> stateId, string newName)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("stateId", stateId) :
                new ObjectParameter("stateId", typeof(int));
    
            var newNameParameter = newName != null ?
                new ObjectParameter("newName", newName) :
                new ObjectParameter("newName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateCity", cityIdParameter, stateIdParameter, newNameParameter);
        }
    
        public virtual int STP_UpdateCountry(Nullable<int> id, string newName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var newNameParameter = newName != null ?
                new ObjectParameter("newName", newName) :
                new ObjectParameter("newName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateCountry", idParameter, newNameParameter);
        }
    
        public virtual int STP_UpdateProduct(Nullable<int> productId, Nullable<int> subCategoryId, string productName, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, Nullable<decimal> price, string productDescription, Nullable<bool> isActive, Nullable<int> quantity)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("modifiedOn", modifiedOn) :
                new ObjectParameter("modifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("productDescription", productDescription) :
                new ObjectParameter("productDescription", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateProduct", productIdParameter, subCategoryIdParameter, productNameParameter, modifiedOnParameter, modifiedByParameter, priceParameter, productDescriptionParameter, isActiveParameter, quantityParameter);
        }
    
        public virtual int STP_UpdateProductDetails(Nullable<int> productId, Nullable<int> subCategoryId, string productName, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, Nullable<decimal> price, string productDescription, Nullable<bool> isActive, Nullable<int> quantity)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("modifiedOn", modifiedOn) :
                new ObjectParameter("modifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("productDescription", productDescription) :
                new ObjectParameter("productDescription", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateProductDetails", productIdParameter, subCategoryIdParameter, productNameParameter, modifiedOnParameter, modifiedByParameter, priceParameter, productDescriptionParameter, isActiveParameter, quantityParameter);
        }
    
        public virtual int STP_UpdateState(Nullable<int> id, string newName, Nullable<int> countryId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var newNameParameter = newName != null ?
                new ObjectParameter("newName", newName) :
                new ObjectParameter("newName", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateState", idParameter, newNameParameter, countryIdParameter);
        }
    
        public virtual int STP_UpdateSubCategories(Nullable<int> subCategoryId, Nullable<int> categoryId, string subCategoryName, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, Nullable<bool> isActive)
        {
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            var subCategoryNameParameter = subCategoryName != null ?
                new ObjectParameter("subCategoryName", subCategoryName) :
                new ObjectParameter("subCategoryName", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("modifiedOn", modifiedOn) :
                new ObjectParameter("modifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateSubCategories", subCategoryIdParameter, categoryIdParameter, subCategoryNameParameter, modifiedOnParameter, modifiedByParameter, isActiveParameter);
        }
    
        public virtual int STP_UpdateUser(Nullable<int> userId, Nullable<int> roleId, Nullable<bool> isActive)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateUser", userIdParameter, roleIdParameter, isActiveParameter);
        }
    
        public virtual int STP_UpdateUserProfile(Nullable<int> userId, string emailId, string userPassWord, string firstName, string lastName, string permanentAddress, string alternateAddress, string mobileNumber, string city)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var userPassWordParameter = userPassWord != null ?
                new ObjectParameter("userPassWord", userPassWord) :
                new ObjectParameter("userPassWord", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("permanentAddress", permanentAddress) :
                new ObjectParameter("permanentAddress", typeof(string));
    
            var alternateAddressParameter = alternateAddress != null ?
                new ObjectParameter("alternateAddress", alternateAddress) :
                new ObjectParameter("alternateAddress", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("mobileNumber", mobileNumber) :
                new ObjectParameter("mobileNumber", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateUserProfile", userIdParameter, emailIdParameter, userPassWordParameter, firstNameParameter, lastNameParameter, permanentAddressParameter, alternateAddressParameter, mobileNumberParameter, cityParameter);
        }
    }
}
