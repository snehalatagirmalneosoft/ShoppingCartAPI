//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShoppingCart.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ShoppingCartEntities : DbContext
    {
        public ShoppingCartEntities()
            : base("name=ShoppingCartEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<aspnet_Applications> aspnet_Applications { get; set; }
        public virtual DbSet<aspnet_Membership> aspnet_Membership { get; set; }
        public virtual DbSet<aspnet_Paths> aspnet_Paths { get; set; }
        public virtual DbSet<aspnet_PersonalizationAllUsers> aspnet_PersonalizationAllUsers { get; set; }
        public virtual DbSet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUser { get; set; }
        public virtual DbSet<aspnet_Profile> aspnet_Profile { get; set; }
        public virtual DbSet<aspnet_Roles> aspnet_Roles { get; set; }
        public virtual DbSet<aspnet_SchemaVersions> aspnet_SchemaVersions { get; set; }
        public virtual DbSet<aspnet_Users> aspnet_Users { get; set; }
        public virtual DbSet<aspnet_WebEvent_Events> aspnet_WebEvent_Events { get; set; }
        public virtual DbSet<Cart> Cart { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Exception> Exception { get; set; }
        public virtual DbSet<Images> Images { get; set; }
        public virtual DbSet<OrderDetail> OrderDetail { get; set; }
        public virtual DbSet<OrderMaster> OrderMaster { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<State> State { get; set; }
        public virtual DbSet<SubCategory> SubCategory { get; set; }
        public virtual DbSet<Temp> Temp { get; set; }
        public virtual DbSet<UserDetail> UserDetail { get; set; }
        public virtual DbSet<UserMaster> UserMaster { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }
        public virtual DbSet<ViewProductDetails> ViewProductDetails { get; set; }
        public virtual DbSet<vw_aspnet_Applications> vw_aspnet_Applications { get; set; }
        public virtual DbSet<vw_aspnet_MembershipUsers> vw_aspnet_MembershipUsers { get; set; }
        public virtual DbSet<vw_aspnet_Profiles> vw_aspnet_Profiles { get; set; }
        public virtual DbSet<vw_aspnet_Roles> vw_aspnet_Roles { get; set; }
        public virtual DbSet<vw_aspnet_Users> vw_aspnet_Users { get; set; }
        public virtual DbSet<vw_aspnet_UsersInRoles> vw_aspnet_UsersInRoles { get; set; }
        public virtual DbSet<vw_aspnet_WebPartState_Paths> vw_aspnet_WebPartState_Paths { get; set; }
        public virtual DbSet<vw_aspnet_WebPartState_Shared> vw_aspnet_WebPartState_Shared { get; set; }
        public virtual DbSet<vw_aspnet_WebPartState_User> vw_aspnet_WebPartState_User { get; set; }
    
        public virtual ObjectResult<GetCartProducts_Result> GetCartProducts(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCartProducts_Result>("GetCartProducts", userIdParameter);
        }
    
        public virtual ObjectResult<GetCountryNames_Result> GetCountryNames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCountryNames_Result>("GetCountryNames");
        }
    
        public virtual int STP_AddNewProduct(Nullable<int> subCategoryId, string productName, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<decimal> price, string productDescription, Nullable<bool> isActive, Nullable<int> quantity)
        {
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("createdOn", createdOn) :
                new ObjectParameter("createdOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("productDescription", productDescription) :
                new ObjectParameter("productDescription", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_AddNewProduct", subCategoryIdParameter, productNameParameter, createdOnParameter, createdByParameter, priceParameter, productDescriptionParameter, isActiveParameter, quantityParameter);
        }
    
        public virtual int STP_AddOrder(Nullable<int> userId, Nullable<decimal> grossAmount, string receiverMobileNumber, string billingMode, string shippingAddress, Nullable<System.DateTime> orderDate, string orderStatus, string receiverEmailId, string receiverFirstName, string receiverLastName)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("grossAmount", grossAmount) :
                new ObjectParameter("grossAmount", typeof(decimal));
    
            var receiverMobileNumberParameter = receiverMobileNumber != null ?
                new ObjectParameter("receiverMobileNumber", receiverMobileNumber) :
                new ObjectParameter("receiverMobileNumber", typeof(string));
    
            var billingModeParameter = billingMode != null ?
                new ObjectParameter("billingMode", billingMode) :
                new ObjectParameter("billingMode", typeof(string));
    
            var shippingAddressParameter = shippingAddress != null ?
                new ObjectParameter("shippingAddress", shippingAddress) :
                new ObjectParameter("shippingAddress", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("orderDate", orderDate) :
                new ObjectParameter("orderDate", typeof(System.DateTime));
    
            var orderStatusParameter = orderStatus != null ?
                new ObjectParameter("orderStatus", orderStatus) :
                new ObjectParameter("orderStatus", typeof(string));
    
            var receiverEmailIdParameter = receiverEmailId != null ?
                new ObjectParameter("receiverEmailId", receiverEmailId) :
                new ObjectParameter("receiverEmailId", typeof(string));
    
            var receiverFirstNameParameter = receiverFirstName != null ?
                new ObjectParameter("receiverFirstName", receiverFirstName) :
                new ObjectParameter("receiverFirstName", typeof(string));
    
            var receiverLastNameParameter = receiverLastName != null ?
                new ObjectParameter("receiverLastName", receiverLastName) :
                new ObjectParameter("receiverLastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_AddOrder", userIdParameter, grossAmountParameter, receiverMobileNumberParameter, billingModeParameter, shippingAddressParameter, orderDateParameter, orderStatusParameter, receiverEmailIdParameter, receiverFirstNameParameter, receiverLastNameParameter);
        }
    
        public virtual int STP_AddProductsToCart(Nullable<int> productId, Nullable<int> userId, Nullable<int> quantity, Nullable<decimal> price)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_AddProductsToCart", productIdParameter, userIdParameter, quantityParameter, priceParameter);
        }
    
        public virtual int STP_DeleteCategory(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteCategory", categoryIdParameter);
        }
    
        public virtual int STP_DeleteCity(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteCity", idParameter);
        }
    
        public virtual int STP_DeleteCountry(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteCountry", idParameter);
        }
    
        public virtual int STP_DeleteException(Nullable<int> exceptionId)
        {
            var exceptionIdParameter = exceptionId.HasValue ?
                new ObjectParameter("exceptionId", exceptionId) :
                new ObjectParameter("exceptionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteException", exceptionIdParameter);
        }
    
        public virtual int STP_DeleteProduct(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteProduct", productIdParameter);
        }
    
        public virtual int STP_DeleteProductImage(Nullable<int> imageId)
        {
            var imageIdParameter = imageId.HasValue ?
                new ObjectParameter("imageId", imageId) :
                new ObjectParameter("imageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteProductImage", imageIdParameter);
        }
    
        public virtual int STP_DeleteState(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteState", idParameter);
        }
    
        public virtual int STP_DeleteSubCategory(Nullable<int> subCategoryId)
        {
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteSubCategory", subCategoryIdParameter);
        }
    
        public virtual int STP_DeleteTemporaryImage(Nullable<int> tempId)
        {
            var tempIdParameter = tempId.HasValue ?
                new ObjectParameter("tempId", tempId) :
                new ObjectParameter("tempId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteTemporaryImage", tempIdParameter);
        }
    
        public virtual int STP_DeleteUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_DeleteUser", userIdParameter);
        }
    
        public virtual ObjectResult<STP_GetAllCities_Result> STP_GetAllCities()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetAllCities_Result>("STP_GetAllCities");
        }
    
        public virtual ObjectResult<STP_GetAllStates_Result> STP_GetAllStates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetAllStates_Result>("STP_GetAllStates");
        }
    
        public virtual ObjectResult<STP_GetAllSubCategories_Result> STP_GetAllSubCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetAllSubCategories_Result>("STP_GetAllSubCategories");
        }
    
        public virtual ObjectResult<STP_GetCartProduct_Result> STP_GetCartProduct(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetCartProduct_Result>("STP_GetCartProduct", productIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> STP_GetCategoryId(Nullable<int> subCategoryId)
        {
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("STP_GetCategoryId", subCategoryIdParameter);
        }
    
        public virtual ObjectResult<STP_GetCategoryIdAndSubCategoryID_Result> STP_GetCategoryIdAndSubCategoryID(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetCategoryIdAndSubCategoryID_Result>("STP_GetCategoryIdAndSubCategoryID", productIdParameter);
        }
    
        public virtual ObjectResult<STP_GetCategoryName_Result> STP_GetCategoryName(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetCategoryName_Result>("STP_GetCategoryName", categoryIdParameter);
        }
    
        public virtual ObjectResult<STP_GetCities_Result> STP_GetCities(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("stateId", stateId) :
                new ObjectParameter("stateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetCities_Result>("STP_GetCities", stateIdParameter);
        }
    
        public virtual ObjectResult<STP_GetCitiesForCountry_Result> STP_GetCitiesForCountry(Nullable<int> countryId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetCitiesForCountry_Result>("STP_GetCitiesForCountry", countryIdParameter);
        }
    
        public virtual ObjectResult<STP_GetCityDetails_Result> STP_GetCityDetails(Nullable<int> cityId)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetCityDetails_Result>("STP_GetCityDetails", cityIdParameter);
        }
    
        public virtual ObjectResult<string> STP_GetCountryDetails(Nullable<int> countryId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("STP_GetCountryDetails", countryIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> STP_GetCountryId(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("stateId", stateId) :
                new ObjectParameter("stateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("STP_GetCountryId", stateIdParameter);
        }
    
        public virtual ObjectResult<string> STP_GetEmailIdList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("STP_GetEmailIdList");
        }
    
        public virtual int STP_GetException(string type, string details, string fileName, string method, Nullable<System.DateTime> datetime)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("details", details) :
                new ObjectParameter("details", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("method", method) :
                new ObjectParameter("method", typeof(string));
    
            var datetimeParameter = datetime.HasValue ?
                new ObjectParameter("datetime", datetime) :
                new ObjectParameter("datetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_GetException", typeParameter, detailsParameter, fileNameParameter, methodParameter, datetimeParameter);
        }
    
        public virtual ObjectResult<STP_GetExceptionDetails_Result> STP_GetExceptionDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetExceptionDetails_Result>("STP_GetExceptionDetails");
        }
    
        public virtual ObjectResult<STP_GetProductsByCategory_Result> STP_GetProductsByCategory(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetProductsByCategory_Result>("STP_GetProductsByCategory", categoryIdParameter);
        }
    
        public virtual ObjectResult<STP_GetProductsBySubCategory_Result> STP_GetProductsBySubCategory(Nullable<int> subCategoryId)
        {
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetProductsBySubCategory_Result>("STP_GetProductsBySubCategory", subCategoryIdParameter);
        }
    
        public virtual ObjectResult<STP_GetRoleList_Result> STP_GetRoleList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetRoleList_Result>("STP_GetRoleList");
        }
    
        public virtual ObjectResult<STP_GetStateDetails_Result> STP_GetStateDetails(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("stateId", stateId) :
                new ObjectParameter("stateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetStateDetails_Result>("STP_GetStateDetails", stateIdParameter);
        }
    
        public virtual ObjectResult<STP_GetStates_Result> STP_GetStates(Nullable<int> countryId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetStates_Result>("STP_GetStates", countryIdParameter);
        }
    
        public virtual ObjectResult<STP_GetSubCategoryDetails_Result> STP_GetSubCategoryDetails(Nullable<int> subCategoryId)
        {
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetSubCategoryDetails_Result>("STP_GetSubCategoryDetails", subCategoryIdParameter);
        }
    
        public virtual ObjectResult<STP_GetUserDetails_Result> STP_GetUserDetails(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetUserDetails_Result>("STP_GetUserDetails", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> STP_GetUserIdViaEmailId(string emailId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("STP_GetUserIdViaEmailId", emailIdParameter);
        }
    
        public virtual ObjectResult<string> STP_GetUserName(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("STP_GetUserName", userIdParameter);
        }
    
        public virtual ObjectResult<STP_GetUsers_Result> STP_GetUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_GetUsers_Result>("STP_GetUsers");
        }
    
        public virtual int STP_InsertCategories(string categoryName, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, Nullable<bool> isActive)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("categoryName", categoryName) :
                new ObjectParameter("categoryName", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("createdOn", createdOn) :
                new ObjectParameter("createdOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("modifiedOn", modifiedOn) :
                new ObjectParameter("modifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_InsertCategories", categoryNameParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, isActiveParameter);
        }
    
        public virtual int STP_InsertCity(Nullable<int> stateId, string cityName)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("stateId", stateId) :
                new ObjectParameter("stateId", typeof(int));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("cityName", cityName) :
                new ObjectParameter("cityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_InsertCity", stateIdParameter, cityNameParameter);
        }
    
        public virtual int STP_InsertCountry(string countryName)
        {
            var countryNameParameter = countryName != null ?
                new ObjectParameter("countryName", countryName) :
                new ObjectParameter("countryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_InsertCountry", countryNameParameter);
        }
    
        public virtual int STP_InsertImagesIntoTemp(string imageUrl)
        {
            var imageUrlParameter = imageUrl != null ?
                new ObjectParameter("imageUrl", imageUrl) :
                new ObjectParameter("imageUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_InsertImagesIntoTemp", imageUrlParameter);
        }
    
        public virtual int STP_InsertProduct(Nullable<int> subCategoryId, string productName, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<decimal> price, string productDescription, Nullable<bool> isActive, Nullable<int> quantity)
        {
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("createdOn", createdOn) :
                new ObjectParameter("createdOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("productDescription", productDescription) :
                new ObjectParameter("productDescription", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_InsertProduct", subCategoryIdParameter, productNameParameter, createdOnParameter, createdByParameter, priceParameter, productDescriptionParameter, isActiveParameter, quantityParameter);
        }
    
        public virtual int STP_InsertState(Nullable<int> countryId, string stateName)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("stateName", stateName) :
                new ObjectParameter("stateName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_InsertState", countryIdParameter, stateNameParameter);
        }
    
        public virtual int STP_InsertSubCategories(Nullable<int> categoryId, string subCategoryName, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, Nullable<bool> isActive)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            var subCategoryNameParameter = subCategoryName != null ?
                new ObjectParameter("subCategoryName", subCategoryName) :
                new ObjectParameter("subCategoryName", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("createdOn", createdOn) :
                new ObjectParameter("createdOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("modifiedOn", modifiedOn) :
                new ObjectParameter("modifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_InsertSubCategories", categoryIdParameter, subCategoryNameParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, isActiveParameter);
        }
    
        public virtual int STP_InsertUser(Nullable<int> roleId, string emailId, string userPassWord, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<bool> isActive, string firstName, string lastName, string permanentAddress, string alternateAddress, string mobileNumber, string city)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(int));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var userPassWordParameter = userPassWord != null ?
                new ObjectParameter("userPassWord", userPassWord) :
                new ObjectParameter("userPassWord", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("createdOn", createdOn) :
                new ObjectParameter("createdOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("permanentAddress", permanentAddress) :
                new ObjectParameter("permanentAddress", typeof(string));
    
            var alternateAddressParameter = alternateAddress != null ?
                new ObjectParameter("alternateAddress", alternateAddress) :
                new ObjectParameter("alternateAddress", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("mobileNumber", mobileNumber) :
                new ObjectParameter("mobileNumber", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_InsertUser", roleIdParameter, emailIdParameter, userPassWordParameter, createdOnParameter, createdByParameter, isActiveParameter, firstNameParameter, lastNameParameter, permanentAddressParameter, alternateAddressParameter, mobileNumberParameter, cityParameter);
        }
    
        public virtual ObjectResult<STP_LoginUser_Result> STP_LoginUser(string emailId, string password)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_LoginUser_Result>("STP_LoginUser", emailIdParameter, passwordParameter);
        }
    
        public virtual ObjectResult<STP_ProductDetails_Result> STP_ProductDetails(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_ProductDetails_Result>("STP_ProductDetails", productIdParameter);
        }
    
        public virtual ObjectResult<STP_RandomProducts_Result> STP_RandomProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_RandomProducts_Result>("STP_RandomProducts");
        }
    
        public virtual int STP_RegisterCustomer(Nullable<int> roleId, string emailId, string userPassWord, Nullable<System.DateTime> createdOn, Nullable<bool> isActive, string firstName, string lastName, string permanentAddress, string alternateAddress, string mobileNumber, string city)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(int));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var userPassWordParameter = userPassWord != null ?
                new ObjectParameter("userPassWord", userPassWord) :
                new ObjectParameter("userPassWord", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("createdOn", createdOn) :
                new ObjectParameter("createdOn", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("permanentAddress", permanentAddress) :
                new ObjectParameter("permanentAddress", typeof(string));
    
            var alternateAddressParameter = alternateAddress != null ?
                new ObjectParameter("alternateAddress", alternateAddress) :
                new ObjectParameter("alternateAddress", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("mobileNumber", mobileNumber) :
                new ObjectParameter("mobileNumber", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_RegisterCustomer", roleIdParameter, emailIdParameter, userPassWordParameter, createdOnParameter, isActiveParameter, firstNameParameter, lastNameParameter, permanentAddressParameter, alternateAddressParameter, mobileNumberParameter, cityParameter);
        }
    
        public virtual int STP_RemoveProductFromCart(Nullable<int> productId, Nullable<int> userId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_RemoveProductFromCart", productIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<STP_Search_Result> STP_Search(string value)
        {
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_Search_Result>("STP_Search", valueParameter);
        }
    
        public virtual ObjectResult<STP_SearchActiveProducts_Result> STP_SearchActiveProducts(string value)
        {
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_SearchActiveProducts_Result>("STP_SearchActiveProducts", valueParameter);
        }
    
        public virtual ObjectResult<STP_ShowAllProductList_Result> STP_ShowAllProductList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_ShowAllProductList_Result>("STP_ShowAllProductList");
        }
    
        public virtual ObjectResult<STP_ShowAllProductsForCategory_Result> STP_ShowAllProductsForCategory(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_ShowAllProductsForCategory_Result>("STP_ShowAllProductsForCategory", categoryIdParameter);
        }
    
        public virtual ObjectResult<STP_ShowCategoryList_Result> STP_ShowCategoryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_ShowCategoryList_Result>("STP_ShowCategoryList");
        }
    
        public virtual ObjectResult<STP_ShowProductImages_Result> STP_ShowProductImages(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_ShowProductImages_Result>("STP_ShowProductImages", productIdParameter);
        }
    
        public virtual ObjectResult<STP_ShowProductList_Result> STP_ShowProductList(Nullable<int> subCategoryId)
        {
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_ShowProductList_Result>("STP_ShowProductList", subCategoryIdParameter);
        }
    
        public virtual ObjectResult<STP_ShowSubCategoryList_Result> STP_ShowSubCategoryList(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_ShowSubCategoryList_Result>("STP_ShowSubCategoryList", categoryIdParameter);
        }
    
        public virtual ObjectResult<STP_ShowTemporaryImages_Result> STP_ShowTemporaryImages()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<STP_ShowTemporaryImages_Result>("STP_ShowTemporaryImages");
        }
    
        public virtual int STP_UpdateCart(Nullable<int> productId, Nullable<int> quantity, Nullable<decimal> price, Nullable<int> userId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateCart", productIdParameter, quantityParameter, priceParameter, userIdParameter);
        }
    
        public virtual int STP_UpdateCategories(Nullable<int> categoryId, string categoryName, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, Nullable<bool> isActive)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("categoryName", categoryName) :
                new ObjectParameter("categoryName", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("modifiedOn", modifiedOn) :
                new ObjectParameter("modifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateCategories", categoryIdParameter, categoryNameParameter, modifiedOnParameter, modifiedByParameter, isActiveParameter);
        }
    
        public virtual int STP_UpdateCity(Nullable<int> cityId, Nullable<int> stateId, string newName)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("cityId", cityId) :
                new ObjectParameter("cityId", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("stateId", stateId) :
                new ObjectParameter("stateId", typeof(int));
    
            var newNameParameter = newName != null ?
                new ObjectParameter("newName", newName) :
                new ObjectParameter("newName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateCity", cityIdParameter, stateIdParameter, newNameParameter);
        }
    
        public virtual int STP_UpdateCountry(Nullable<int> id, string newName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var newNameParameter = newName != null ?
                new ObjectParameter("newName", newName) :
                new ObjectParameter("newName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateCountry", idParameter, newNameParameter);
        }
    
        public virtual int STP_UpdateProduct(Nullable<int> productId, Nullable<int> subCategoryId, string productName, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, Nullable<decimal> price, string productDescription, Nullable<bool> isActive, Nullable<int> quantity)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("modifiedOn", modifiedOn) :
                new ObjectParameter("modifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("productDescription", productDescription) :
                new ObjectParameter("productDescription", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateProduct", productIdParameter, subCategoryIdParameter, productNameParameter, modifiedOnParameter, modifiedByParameter, priceParameter, productDescriptionParameter, isActiveParameter, quantityParameter);
        }
    
        public virtual int STP_UpdateProductDetails(Nullable<int> productId, Nullable<int> subCategoryId, string productName, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, Nullable<decimal> price, string productDescription, Nullable<bool> isActive, Nullable<int> quantity)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("modifiedOn", modifiedOn) :
                new ObjectParameter("modifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("productDescription", productDescription) :
                new ObjectParameter("productDescription", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateProductDetails", productIdParameter, subCategoryIdParameter, productNameParameter, modifiedOnParameter, modifiedByParameter, priceParameter, productDescriptionParameter, isActiveParameter, quantityParameter);
        }
    
        public virtual int STP_UpdateState(Nullable<int> id, string newName, Nullable<int> countryId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var newNameParameter = newName != null ?
                new ObjectParameter("newName", newName) :
                new ObjectParameter("newName", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateState", idParameter, newNameParameter, countryIdParameter);
        }
    
        public virtual int STP_UpdateSubCategories(Nullable<int> subCategoryId, Nullable<int> categoryId, string subCategoryName, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy, Nullable<bool> isActive)
        {
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("subCategoryId", subCategoryId) :
                new ObjectParameter("subCategoryId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            var subCategoryNameParameter = subCategoryName != null ?
                new ObjectParameter("subCategoryName", subCategoryName) :
                new ObjectParameter("subCategoryName", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("modifiedOn", modifiedOn) :
                new ObjectParameter("modifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateSubCategories", subCategoryIdParameter, categoryIdParameter, subCategoryNameParameter, modifiedOnParameter, modifiedByParameter, isActiveParameter);
        }
    
        public virtual int STP_UpdateUser(Nullable<int> userId, Nullable<int> roleId, Nullable<bool> isActive)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateUser", userIdParameter, roleIdParameter, isActiveParameter);
        }
    
        public virtual int STP_UpdateUserProfile(Nullable<int> userId, string emailId, string userPassWord, string firstName, string lastName, string permanentAddress, string alternateAddress, string mobileNumber, string city)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var userPassWordParameter = userPassWord != null ?
                new ObjectParameter("userPassWord", userPassWord) :
                new ObjectParameter("userPassWord", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("permanentAddress", permanentAddress) :
                new ObjectParameter("permanentAddress", typeof(string));
    
            var alternateAddressParameter = alternateAddress != null ?
                new ObjectParameter("alternateAddress", alternateAddress) :
                new ObjectParameter("alternateAddress", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("mobileNumber", mobileNumber) :
                new ObjectParameter("mobileNumber", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("STP_UpdateUserProfile", userIdParameter, emailIdParameter, userPassWordParameter, firstNameParameter, lastNameParameter, permanentAddressParameter, alternateAddressParameter, mobileNumberParameter, cityParameter);
        }
    
        public virtual ObjectResult<string> aspnet_AnyDataInTables(Nullable<int> tablesToCheck)
        {
            var tablesToCheckParameter = tablesToCheck.HasValue ?
                new ObjectParameter("TablesToCheck", tablesToCheck) :
                new ObjectParameter("TablesToCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_AnyDataInTables", tablesToCheckParameter);
        }
    
        public virtual int aspnet_Applications_CreateApplication(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Applications_CreateApplication", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_CheckSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_CheckSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Membership_ChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordQuestionParameter = newPasswordQuestion != null ?
                new ObjectParameter("NewPasswordQuestion", newPasswordQuestion) :
                new ObjectParameter("NewPasswordQuestion", typeof(string));
    
            var newPasswordAnswerParameter = newPasswordAnswer != null ?
                new ObjectParameter("NewPasswordAnswer", newPasswordAnswer) :
                new ObjectParameter("NewPasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ChangePasswordQuestionAndAnswer", applicationNameParameter, userNameParameter, newPasswordQuestionParameter, newPasswordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_CreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, Nullable<bool> isApproved, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> createDate, Nullable<int> uniqueEmail, Nullable<int> passwordFormat, ObjectParameter userId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_CreateUser", applicationNameParameter, userNameParameter, passwordParameter, passwordSaltParameter, emailParameter, passwordQuestionParameter, passwordAnswerParameter, isApprovedParameter, currentTimeUtcParameter, createDateParameter, uniqueEmailParameter, passwordFormatParameter, userId);
        }
    
        public virtual int aspnet_Membership_FindUsersByEmail(string applicationName, string emailToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailToMatchParameter = emailToMatch != null ?
                new ObjectParameter("EmailToMatch", emailToMatch) :
                new ObjectParameter("EmailToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByEmail", applicationNameParameter, emailToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_FindUsersByName(string applicationName, string userNameToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByName", applicationNameParameter, userNameToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetAllUsers(string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetAllUsers", applicationNameParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetNumberOfUsersOnline(string applicationName, Nullable<int> minutesSinceLastInActive, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var minutesSinceLastInActiveParameter = minutesSinceLastInActive.HasValue ?
                new ObjectParameter("MinutesSinceLastInActive", minutesSinceLastInActive) :
                new ObjectParameter("MinutesSinceLastInActive", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetNumberOfUsersOnline", applicationNameParameter, minutesSinceLastInActiveParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPassword_Result> aspnet_Membership_GetPassword(string applicationName, string userName, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPassword_Result>("aspnet_Membership_GetPassword", applicationNameParameter, userNameParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, passwordAnswerParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPasswordWithFormat_Result> aspnet_Membership_GetPasswordWithFormat(string applicationName, string userName, Nullable<bool> updateLastLoginActivityDate, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPasswordWithFormat_Result>("aspnet_Membership_GetPasswordWithFormat", applicationNameParameter, userNameParameter, updateLastLoginActivityDateParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Membership_GetUserByEmail(string applicationName, string email)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Membership_GetUserByEmail", applicationNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByName_Result> aspnet_Membership_GetUserByName(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByName_Result>("aspnet_Membership_GetUserByName", applicationNameParameter, userNameParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByUserId_Result> aspnet_Membership_GetUserByUserId(Nullable<System.Guid> userId, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByUserId_Result>("aspnet_Membership_GetUserByUserId", userIdParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual int aspnet_Membership_ResetPassword(string applicationName, string userName, string newPassword, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ResetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter, passwordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_SetPassword(string applicationName, string userName, string newPassword, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_SetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter);
        }
    
        public virtual int aspnet_Membership_UnlockUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UnlockUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUser(string applicationName, string userName, string email, string comment, Nullable<bool> isApproved, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate, Nullable<int> uniqueEmail, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUser", applicationNameParameter, userNameParameter, emailParameter, commentParameter, isApprovedParameter, lastLoginDateParameter, lastActivityDateParameter, uniqueEmailParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUserInfo(string applicationName, string userName, Nullable<bool> isPasswordCorrect, Nullable<bool> updateLastLoginActivityDate, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isPasswordCorrectParameter = isPasswordCorrect.HasValue ?
                new ObjectParameter("IsPasswordCorrect", isPasswordCorrect) :
                new ObjectParameter("IsPasswordCorrect", typeof(bool));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUserInfo", applicationNameParameter, userNameParameter, isPasswordCorrectParameter, updateLastLoginActivityDateParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, lastLoginDateParameter, lastActivityDateParameter);
        }
    
        public virtual int aspnet_Paths_CreatePath(Nullable<System.Guid> applicationId, string path, ObjectParameter pathId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Paths_CreatePath", applicationIdParameter, pathParameter, pathId);
        }
    
        public virtual int aspnet_Personalization_GetApplicationId(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Personalization_GetApplicationId", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_PersonalizationAdministration_DeleteAllState(Nullable<bool> allUsersScope, string applicationName, ObjectParameter count)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_DeleteAllState", allUsersScopeParameter, applicationNameParameter, count);
        }
    
        public virtual int aspnet_PersonalizationAdministration_FindState(Nullable<bool> allUsersScope, string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_FindState", allUsersScopeParameter, applicationNameParameter, pageIndexParameter, pageSizeParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_GetCountOfState(ObjectParameter count, Nullable<bool> allUsersScope, string applicationName, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_GetCountOfState", count, allUsersScopeParameter, applicationNameParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetSharedState(ObjectParameter count, string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetSharedState", count, applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetUserState(ObjectParameter count, string applicationName, Nullable<System.DateTime> inactiveSinceDate, string userName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetUserState", count, applicationNameParameter, inactiveSinceDateParameter, userNameParameter, pathParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationAllUsers_GetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationAllUsers_GetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_ResetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_ResetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_SetPageSettings(string applicationName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_SetPageSettings", applicationNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationPerUser_GetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationPerUser_GetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_ResetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_ResetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_SetPageSettings(string applicationName, string userName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_SetPageSettings", applicationNameParameter, userNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteProfiles(string applicationName, string userNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteProfiles", applicationNameParameter, userNamesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_GetNumberOfInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_GetNumberOfInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_Profile_GetProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<int> pageIndex, Nullable<int> pageSize, string userNameToMatch, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_GetProfiles", applicationNameParameter, profileAuthOptionsParameter, pageIndexParameter, pageSizeParameter, userNameToMatchParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<aspnet_Profile_GetProperties_Result> aspnet_Profile_GetProperties(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Profile_GetProperties_Result>("aspnet_Profile_GetProperties", applicationNameParameter, userNameParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Profile_SetProperties(string applicationName, string propertyNames, string propertyValuesString, byte[] propertyValuesBinary, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var propertyNamesParameter = propertyNames != null ?
                new ObjectParameter("PropertyNames", propertyNames) :
                new ObjectParameter("PropertyNames", typeof(string));
    
            var propertyValuesStringParameter = propertyValuesString != null ?
                new ObjectParameter("PropertyValuesString", propertyValuesString) :
                new ObjectParameter("PropertyValuesString", typeof(string));
    
            var propertyValuesBinaryParameter = propertyValuesBinary != null ?
                new ObjectParameter("PropertyValuesBinary", propertyValuesBinary) :
                new ObjectParameter("PropertyValuesBinary", typeof(byte[]));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_SetProperties", applicationNameParameter, propertyNamesParameter, propertyValuesStringParameter, propertyValuesBinaryParameter, userNameParameter, isUserAnonymousParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_RegisterSchemaVersion(string feature, string compatibleSchemaVersion, Nullable<bool> isCurrentVersion, Nullable<bool> removeIncompatibleSchema)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            var isCurrentVersionParameter = isCurrentVersion.HasValue ?
                new ObjectParameter("IsCurrentVersion", isCurrentVersion) :
                new ObjectParameter("IsCurrentVersion", typeof(bool));
    
            var removeIncompatibleSchemaParameter = removeIncompatibleSchema.HasValue ?
                new ObjectParameter("RemoveIncompatibleSchema", removeIncompatibleSchema) :
                new ObjectParameter("RemoveIncompatibleSchema", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_RegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter, isCurrentVersionParameter, removeIncompatibleSchemaParameter);
        }
    
        public virtual int aspnet_Roles_CreateRole(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_CreateRole", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Roles_DeleteRole(string applicationName, string roleName, Nullable<bool> deleteOnlyIfRoleIsEmpty)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var deleteOnlyIfRoleIsEmptyParameter = deleteOnlyIfRoleIsEmpty.HasValue ?
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", deleteOnlyIfRoleIsEmpty) :
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_DeleteRole", applicationNameParameter, roleNameParameter, deleteOnlyIfRoleIsEmptyParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Roles_GetAllRoles(string applicationName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Roles_GetAllRoles", applicationNameParameter);
        }
    
        public virtual int aspnet_Roles_RoleExists(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_RoleExists", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Setup_RemoveAllRoleMembers(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RemoveAllRoleMembers", nameParameter);
        }
    
        public virtual int aspnet_Setup_RestorePermissions(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RestorePermissions", nameParameter);
        }
    
        public virtual int aspnet_UnRegisterSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UnRegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Users_CreateUser(Nullable<System.Guid> applicationId, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> lastActivityDate, ObjectParameter userId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_CreateUser", applicationIdParameter, userNameParameter, isUserAnonymousParameter, lastActivityDateParameter, userId);
        }
    
        public virtual int aspnet_Users_DeleteUser(string applicationName, string userName, Nullable<int> tablesToDeleteFrom, ObjectParameter numTablesDeletedFrom)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var tablesToDeleteFromParameter = tablesToDeleteFrom.HasValue ?
                new ObjectParameter("TablesToDeleteFrom", tablesToDeleteFrom) :
                new ObjectParameter("TablesToDeleteFrom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_DeleteUser", applicationNameParameter, userNameParameter, tablesToDeleteFromParameter, numTablesDeletedFrom);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_AddUsersToRoles(string applicationName, string userNames, string roleNames, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_AddUsersToRoles", applicationNameParameter, userNamesParameter, roleNamesParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_FindUsersInRole(string applicationName, string roleName, string userNameToMatch)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_FindUsersInRole", applicationNameParameter, roleNameParameter, userNameToMatchParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetRolesForUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetRolesForUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetUsersInRoles(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetUsersInRoles", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_UsersInRoles_IsUserInRole(string applicationName, string userName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_IsUserInRole", applicationNameParameter, userNameParameter, roleNameParameter);
        }
    
        public virtual ObjectResult<aspnet_UsersInRoles_RemoveUsersFromRoles_Result> aspnet_UsersInRoles_RemoveUsersFromRoles(string applicationName, string userNames, string roleNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_UsersInRoles_RemoveUsersFromRoles_Result>("aspnet_UsersInRoles_RemoveUsersFromRoles", applicationNameParameter, userNamesParameter, roleNamesParameter);
        }
    
        public virtual int aspnet_WebEvent_LogEvent(string eventId, Nullable<System.DateTime> eventTimeUtc, Nullable<System.DateTime> eventTime, string eventType, Nullable<decimal> eventSequence, Nullable<decimal> eventOccurrence, Nullable<int> eventCode, Nullable<int> eventDetailCode, string message, string applicationPath, string applicationVirtualPath, string machineName, string requestUrl, string exceptionType, string details)
        {
            var eventIdParameter = eventId != null ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(string));
    
            var eventTimeUtcParameter = eventTimeUtc.HasValue ?
                new ObjectParameter("EventTimeUtc", eventTimeUtc) :
                new ObjectParameter("EventTimeUtc", typeof(System.DateTime));
    
            var eventTimeParameter = eventTime.HasValue ?
                new ObjectParameter("EventTime", eventTime) :
                new ObjectParameter("EventTime", typeof(System.DateTime));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var eventSequenceParameter = eventSequence.HasValue ?
                new ObjectParameter("EventSequence", eventSequence) :
                new ObjectParameter("EventSequence", typeof(decimal));
    
            var eventOccurrenceParameter = eventOccurrence.HasValue ?
                new ObjectParameter("EventOccurrence", eventOccurrence) :
                new ObjectParameter("EventOccurrence", typeof(decimal));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventDetailCodeParameter = eventDetailCode.HasValue ?
                new ObjectParameter("EventDetailCode", eventDetailCode) :
                new ObjectParameter("EventDetailCode", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var applicationPathParameter = applicationPath != null ?
                new ObjectParameter("ApplicationPath", applicationPath) :
                new ObjectParameter("ApplicationPath", typeof(string));
    
            var applicationVirtualPathParameter = applicationVirtualPath != null ?
                new ObjectParameter("ApplicationVirtualPath", applicationVirtualPath) :
                new ObjectParameter("ApplicationVirtualPath", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var requestUrlParameter = requestUrl != null ?
                new ObjectParameter("RequestUrl", requestUrl) :
                new ObjectParameter("RequestUrl", typeof(string));
    
            var exceptionTypeParameter = exceptionType != null ?
                new ObjectParameter("ExceptionType", exceptionType) :
                new ObjectParameter("ExceptionType", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_WebEvent_LogEvent", eventIdParameter, eventTimeUtcParameter, eventTimeParameter, eventTypeParameter, eventSequenceParameter, eventOccurrenceParameter, eventCodeParameter, eventDetailCodeParameter, messageParameter, applicationPathParameter, applicationVirtualPathParameter, machineNameParameter, requestUrlParameter, exceptionTypeParameter, detailsParameter);
        }
    }
}
